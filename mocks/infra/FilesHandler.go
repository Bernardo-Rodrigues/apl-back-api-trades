// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "app/core/use-case/dto"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FilesHandler is an autogenerated mock type for the FilesHandler type
type FilesHandler struct {
	mock.Mock
}

type FilesHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *FilesHandler) EXPECT() *FilesHandler_Expecter {
	return &FilesHandler_Expecter{mock: &_m.Mock}
}

// BuildByteArray provides a mock function with given fields: report
func (_m *FilesHandler) BuildByteArray(report dto.ReportDto) ([]byte, error) {
	ret := _m.Called(report)

	if len(ret) == 0 {
		panic("no return value specified for BuildByteArray")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.ReportDto) ([]byte, error)); ok {
		return rf(report)
	}
	if rf, ok := ret.Get(0).(func(dto.ReportDto) []byte); ok {
		r0 = rf(report)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.ReportDto) error); ok {
		r1 = rf(report)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilesHandler_BuildByteArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildByteArray'
type FilesHandler_BuildByteArray_Call struct {
	*mock.Call
}

// BuildByteArray is a helper method to define mock.On call
//   - report dto.ReportDto
func (_e *FilesHandler_Expecter) BuildByteArray(report interface{}) *FilesHandler_BuildByteArray_Call {
	return &FilesHandler_BuildByteArray_Call{Call: _e.mock.On("BuildByteArray", report)}
}

func (_c *FilesHandler_BuildByteArray_Call) Run(run func(report dto.ReportDto)) *FilesHandler_BuildByteArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.ReportDto))
	})
	return _c
}

func (_c *FilesHandler_BuildByteArray_Call) Return(_a0 []byte, _a1 error) *FilesHandler_BuildByteArray_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FilesHandler_BuildByteArray_Call) RunAndReturn(run func(dto.ReportDto) ([]byte, error)) *FilesHandler_BuildByteArray_Call {
	_c.Call.Return(run)
	return _c
}

// LoadValuesInInterval provides a mock function with given fields: startDate, endDate
func (_m *FilesHandler) LoadValuesInInterval(startDate time.Time, endDate time.Time) (dto.TradeDtos, dto.PricesDto, error) {
	ret := _m.Called(startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for LoadValuesInInterval")
	}

	var r0 dto.TradeDtos
	var r1 dto.PricesDto
	var r2 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) (dto.TradeDtos, dto.PricesDto, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) dto.TradeDtos); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dto.TradeDtos)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) dto.PricesDto); ok {
		r1 = rf(startDate, endDate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(dto.PricesDto)
		}
	}

	if rf, ok := ret.Get(2).(func(time.Time, time.Time) error); ok {
		r2 = rf(startDate, endDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilesHandler_LoadValuesInInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadValuesInInterval'
type FilesHandler_LoadValuesInInterval_Call struct {
	*mock.Call
}

// LoadValuesInInterval is a helper method to define mock.On call
//   - startDate time.Time
//   - endDate time.Time
func (_e *FilesHandler_Expecter) LoadValuesInInterval(startDate interface{}, endDate interface{}) *FilesHandler_LoadValuesInInterval_Call {
	return &FilesHandler_LoadValuesInInterval_Call{Call: _e.mock.On("LoadValuesInInterval", startDate, endDate)}
}

func (_c *FilesHandler_LoadValuesInInterval_Call) Run(run func(startDate time.Time, endDate time.Time)) *FilesHandler_LoadValuesInInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *FilesHandler_LoadValuesInInterval_Call) Return(_a0 dto.TradeDtos, _a1 dto.PricesDto, _a2 error) *FilesHandler_LoadValuesInInterval_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FilesHandler_LoadValuesInInterval_Call) RunAndReturn(run func(time.Time, time.Time) (dto.TradeDtos, dto.PricesDto, error)) *FilesHandler_LoadValuesInInterval_Call {
	_c.Call.Return(run)
	return _c
}

// NewFilesHandler creates a new instance of FilesHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilesHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilesHandler {
	mock := &FilesHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
