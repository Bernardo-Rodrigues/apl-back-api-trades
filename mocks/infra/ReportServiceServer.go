// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gen "app/infra/adapters/grpc/services/report/gen"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ReportServiceServer is an autogenerated mock type for the ReportServiceServer type
type ReportServiceServer struct {
	mock.Mock
}

type ReportServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportServiceServer) EXPECT() *ReportServiceServer_Expecter {
	return &ReportServiceServer_Expecter{mock: &_m.Mock}
}

// GenerateReport provides a mock function with given fields: _a0, _a1
func (_m *ReportServiceServer) GenerateReport(_a0 context.Context, _a1 *gen.ReportRequest) (*gen.ReportResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReport")
	}

	var r0 *gen.ReportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReportRequest) (*gen.ReportResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gen.ReportRequest) *gen.ReportResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.ReportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gen.ReportRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportServiceServer_GenerateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateReport'
type ReportServiceServer_GenerateReport_Call struct {
	*mock.Call
}

// GenerateReport is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *gen.ReportRequest
func (_e *ReportServiceServer_Expecter) GenerateReport(_a0 interface{}, _a1 interface{}) *ReportServiceServer_GenerateReport_Call {
	return &ReportServiceServer_GenerateReport_Call{Call: _e.mock.On("GenerateReport", _a0, _a1)}
}

func (_c *ReportServiceServer_GenerateReport_Call) Run(run func(_a0 context.Context, _a1 *gen.ReportRequest)) *ReportServiceServer_GenerateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gen.ReportRequest))
	})
	return _c
}

func (_c *ReportServiceServer_GenerateReport_Call) Return(_a0 *gen.ReportResponse, _a1 error) *ReportServiceServer_GenerateReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReportServiceServer_GenerateReport_Call) RunAndReturn(run func(context.Context, *gen.ReportRequest) (*gen.ReportResponse, error)) *ReportServiceServer_GenerateReport_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedReportServiceServer provides a mock function with given fields:
func (_m *ReportServiceServer) mustEmbedUnimplementedReportServiceServer() {
	_m.Called()
}

// ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedReportServiceServer'
type ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedReportServiceServer is a helper method to define mock.On call
func (_e *ReportServiceServer_Expecter) mustEmbedUnimplementedReportServiceServer() *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call {
	return &ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedReportServiceServer")}
}

func (_c *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call) Run(run func()) *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call) Return() *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call) RunAndReturn(run func()) *ReportServiceServer_mustEmbedUnimplementedReportServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewReportServiceServer creates a new instance of ReportServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportServiceServer {
	mock := &ReportServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
