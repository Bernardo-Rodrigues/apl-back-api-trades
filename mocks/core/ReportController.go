// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	files "app/infra/adapters/files"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReportController is an autogenerated mock type for the ReportController type
type ReportController struct {
	mock.Mock
}

type ReportController_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportController) EXPECT() *ReportController_Expecter {
	return &ReportController_Expecter{mock: &_m.Mock}
}

// GenerateReport provides a mock function with given fields: startDate, endDate, intervalMinutes, initialBalance
func (_m *ReportController) GenerateReport(startDate time.Time, endDate time.Time, intervalMinutes int, initialBalance float64) ([]byte, error) {
	ret := _m.Called(startDate, endDate, intervalMinutes, initialBalance)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReport")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, float64) ([]byte, error)); ok {
		return rf(startDate, endDate, intervalMinutes, initialBalance)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int, float64) []byte); ok {
		r0 = rf(startDate, endDate, intervalMinutes, initialBalance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time, int, float64) error); ok {
		r1 = rf(startDate, endDate, intervalMinutes, initialBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportController_GenerateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateReport'
type ReportController_GenerateReport_Call struct {
	*mock.Call
}

// GenerateReport is a helper method to define mock.On call
//   - startDate time.Time
//   - endDate time.Time
//   - intervalMinutes int
//   - initialBalance float64
func (_e *ReportController_Expecter) GenerateReport(startDate interface{}, endDate interface{}, intervalMinutes interface{}, initialBalance interface{}) *ReportController_GenerateReport_Call {
	return &ReportController_GenerateReport_Call{Call: _e.mock.On("GenerateReport", startDate, endDate, intervalMinutes, initialBalance)}
}

func (_c *ReportController_GenerateReport_Call) Run(run func(startDate time.Time, endDate time.Time, intervalMinutes int, initialBalance float64)) *ReportController_GenerateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time), args[2].(int), args[3].(float64))
	})
	return _c
}

func (_c *ReportController_GenerateReport_Call) Return(_a0 []byte, _a1 error) *ReportController_GenerateReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReportController_GenerateReport_Call) RunAndReturn(run func(time.Time, time.Time, int, float64) ([]byte, error)) *ReportController_GenerateReport_Call {
	_c.Call.Return(run)
	return _c
}

// SetFilesHandler provides a mock function with given fields: filesHandler
func (_m *ReportController) SetFilesHandler(filesHandler files.FilesHandler) {
	_m.Called(filesHandler)
}

// ReportController_SetFilesHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFilesHandler'
type ReportController_SetFilesHandler_Call struct {
	*mock.Call
}

// SetFilesHandler is a helper method to define mock.On call
//   - filesHandler files.FilesHandler
func (_e *ReportController_Expecter) SetFilesHandler(filesHandler interface{}) *ReportController_SetFilesHandler_Call {
	return &ReportController_SetFilesHandler_Call{Call: _e.mock.On("SetFilesHandler", filesHandler)}
}

func (_c *ReportController_SetFilesHandler_Call) Run(run func(filesHandler files.FilesHandler)) *ReportController_SetFilesHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(files.FilesHandler))
	})
	return _c
}

func (_c *ReportController_SetFilesHandler_Call) Return() *ReportController_SetFilesHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReportController_SetFilesHandler_Call) RunAndReturn(run func(files.FilesHandler)) *ReportController_SetFilesHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewReportController creates a new instance of ReportController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportController {
	mock := &ReportController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
