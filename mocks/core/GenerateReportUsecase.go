// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "app/core/use-case/dto"

	mock "github.com/stretchr/testify/mock"
)

// GenerateReportUsecase is an autogenerated mock type for the GenerateReportUsecase type
type GenerateReportUsecase struct {
	mock.Mock
}

type GenerateReportUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *GenerateReportUsecase) EXPECT() *GenerateReportUsecase_Expecter {
	return &GenerateReportUsecase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: input
func (_m *GenerateReportUsecase) Execute(input dto.GenerateReportDto) dto.ReportDto {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dto.ReportDto
	if rf, ok := ret.Get(0).(func(dto.GenerateReportDto) dto.ReportDto); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dto.ReportDto)
		}
	}

	return r0
}

// GenerateReportUsecase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type GenerateReportUsecase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - input dto.GenerateReportDto
func (_e *GenerateReportUsecase_Expecter) Execute(input interface{}) *GenerateReportUsecase_Execute_Call {
	return &GenerateReportUsecase_Execute_Call{Call: _e.mock.On("Execute", input)}
}

func (_c *GenerateReportUsecase_Execute_Call) Run(run func(input dto.GenerateReportDto)) *GenerateReportUsecase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.GenerateReportDto))
	})
	return _c
}

func (_c *GenerateReportUsecase_Execute_Call) Return(_a0 dto.ReportDto) *GenerateReportUsecase_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenerateReportUsecase_Execute_Call) RunAndReturn(run func(dto.GenerateReportDto) dto.ReportDto) *GenerateReportUsecase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenerateReportUsecase creates a new instance of GenerateReportUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerateReportUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenerateReportUsecase {
	mock := &GenerateReportUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
